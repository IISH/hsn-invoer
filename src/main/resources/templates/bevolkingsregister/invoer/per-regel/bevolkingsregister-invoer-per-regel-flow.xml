<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">
  <!-- BS0I: IDENTIFICATIE BRON EN ONDERZOEKSPERSOON -->
  <view-state id="BS0I" view="bevolkingsregister/BS0IC" model="akte">
    <on-entry>
      <evaluate expression="bevolkingsregisterService.createNewAkteForNewInputOneLineEach()" result="flowScope.akte"/>
    </on-entry>

    <transition on="stop" to="stopEnd"/>

    <transition on="next" to="prevRegistrationCheck">
      <evaluate expression="bevolkingsregisterService.registerOP(flowScope.akte)"/>
    </transition>
  </view-state>

  <action-state id="prevRegistrationCheck">
    <evaluate expression="
      flowScope.akte.prevRegistration.keyToSourceRegister gt 0 and
      flowScope.akte.prevRegistration.dayEntryHead gt 0 and
      flowScope.akte.prevRegistration.monthEntryHead gt 0 and
      flowScope.akte.prevRegistration.yearEntryHead gt 0"/>

    <transition on="yes" to="BS0A1"/>
    <transition on="no" to="BS1"/>
  </action-state>

  <!-- BS0A1: HERNUMMEREN PERSONEN REGISTRATIE -->
  <view-state id="BS0A1" view="bevolkingsregister/BS0A1" model="akte">
    <transition on="stop" to="stopEnd"/>

    <transition on="next" to="BS1">
      <evaluate expression="bevolkingsregisterService.renumberRegistrationPersons(flowScope.akte)"/>
    </transition>
  </view-state>

  <!-- BS1: PERSONEN -->
  <view-state id="BS1" view="bevolkingsregister/BS1-per-regel" model="akte">
    <transition on="person-dynamic-update">
      <evaluate
          expression="bevolkingsregisterService.updateDynamicField(flowScope.akte, requestParameters.person, requestParameters.type, requestParameters.seqNr, requestParameters.asMap())"/>
      <render fragments="#{'b3Content' + requestParameters.type}"/>
    </transition>

    <transition on="person-dynamic-add">
      <evaluate
          expression="bevolkingsregisterService.addNewDynamicField(flowScope.akte, requestParameters.person, requestParameters.type, requestParameters.asMap())"/>
      <render fragments="#{'b3Content' + requestParameters.type}"/>
    </transition>

    <transition on="person-dynamic-remove">
      <evaluate
          expression="bevolkingsregisterService.removeDynamicField(flowScope.akte, requestParameters.person, requestParameters.type, requestParameters.seqNr)"/>
      <render fragments="#{'b3Content' + requestParameters.type}"/>
    </transition>

    <transition on="refresh-person-dynamics">
      <evaluate expression="bevolkingsregisterService.registerPerson(flowScope.akte)"/>
      <render fragments="#{'b3Content' + requestParameters.type}"/>
    </transition>

    <transition on="refresh-person-dynamic">
      <render fragments="#{requestParameters.type + '_CONTAINER'}"/>
    </transition>

    <transition on="copy-line">
      <evaluate
          expression="bevolkingsregisterService.copyLine(flowScope.akte, requestParameters.person, requestParameters.copyLine)"/>
      <render fragments="currentPerson"/>
    </transition>

    <transition on="stop" to="stopEnd"/>

    <transition on="nextPerson" to="nextPersonCheck">
      <evaluate expression="bevolkingsregisterService.registerPerson(flowScope.akte)"/>
    </transition>

    <transition on="next" to="nextCheck">
      <evaluate expression="bevolkingsregisterService.registerPerson(flowScope.akte)"/>
    </transition>
  </view-state>

  <action-state id="nextPersonCheck">
    <evaluate expression="bevolkingsregisterHelper.registrationHasMaxPersons(flowScope.akte) == false"/>

    <transition on="yes" to="BS1">
      <evaluate expression="bevolkingsregisterService.setUpPerson(flowScope.akte)"/>
    </transition>
    <transition on="no" to="BS2"/>
  </action-state>

  <action-state id="nextCheck">
    <evaluate expression="bevolkingsregisterHelper.registrationRequiresAnotherPerson(flowScope.akte)"/>

    <transition on="yes" to="BS1">
      <evaluate expression="bevolkingsregisterService.setUpPerson(flowScope.akte)"/>
    </transition>
    <transition on="no" to="burgStandRelatieCheck"/>
  </action-state>

  <action-state id="burgStandRelatieCheck">
    <evaluate
        expression="bevolkingsregisterHelper.getPersonDynamicsWithInvalidBurgStandRelatie(flowScope.akte)"
        result="flashScope.invalidPersonDynamics"/>
    <evaluate expression="flashScope.invalidPersonDynamics.size() > 0"/>

    <transition on="yes" to="BS1">
      <evaluate expression="flowScope.akte.setBurgStandRelFix(true)"/>
      <evaluate
          expression="flowScope.akte.setNextPersonKey(flashScope.invalidPersonDynamics.get(0).keyToRegistrationPersons)"/>
      <evaluate expression="bevolkingsregisterService.setUpPerson(flowScope.akte)"/>
    </transition>

    <transition on="no" to="BS2">
      <evaluate expression="flowScope.akte.setBurgStandRelFix(false)"/>
    </transition>
  </action-state>

  <!-- BS2: ADRESSEN -->
  <view-state id="BS2" view="bevolkingsregister/BS2" model="akte">
    <transition on="registration-address-update">
      <evaluate
          expression="bevolkingsregisterService.updateRegistrationAddress(flowScope.akte, requestParameters.person, requestParameters.seqNr, requestParameters.asMap())"/>
      <render fragments="registrationAddresses"/>
    </transition>

    <transition on="registration-address-add">
      <evaluate
          expression="bevolkingsregisterService.addNewRegistrationAddress(flowScope.akte, requestParameters.person, requestParameters.seqNr, requestParameters.asMap())"/>
      <render fragments="registrationAddresses"/>
    </transition>

    <transition on="registration-address-remove">
      <evaluate
          expression="bevolkingsregisterService.removeRegistrationAddress(flowScope.akte, requestParameters.person,  requestParameters.seqNr)"/>
      <render fragments="registrationAddresses"/>
    </transition>

    <transition on="stop" to="stopEnd"/>

    <transition on="next" to="finishEnd">
      <evaluate expression="bevolkingsregisterService.saveRegistration(flowScope.akte)"/>
    </transition>
  </view-state>

  <end-state id="stopEnd" view="redirect:/bevolkingsregister/hoofdmenu">
    <on-entry>
      <evaluate expression="bevolkingsregisterService.deleteRegistration(flowScope.akte)"/>
    </on-entry>
  </end-state>

  <end-state id="finishEnd" view="redirect:/bevolkingsregister/hoofdmenu"/>
</flow>